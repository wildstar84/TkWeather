.\" Automatically generated by Pod::Man 4.11 (Pod::Simple 3.35)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "GEOLOCATEZIP 1"
.TH GEOLOCATEZIP 1 "2019-11-12" "perl v5.30.0" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
geolocatezip.pl
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
\&./geolocatezip.pl, by (c) Jim Turner
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
geolocatezip.pl attempts to first fetch the users current \s-1IP\s0 address, then uses that 
to fetch the zipcode for that \s-1IP\s0 address using geolocation.  Failing that, it attempts 
to fetch the city and state for the \s-1IP\s0 address and then uses a postal service site 
to attempt to look up a zip-code for that city and state.  If multiple zip-codes are 
returned, then the last one is returned.  The zip-code found is written to \s-1STDOUT.\s0
.PP
The purpose of this program is for use by TkWeather in order to get the weather 
hopefully for the location the user's computer is actually in.  This is useful if 
the user is a frequent traveler and using a laptop.
.PP
\&\s-1NOTE:\s0  works for U.S., maybe Canada too; for now.
.SH "LICENSE AND COPYRIGHT"
.IX Header "LICENSE AND COPYRIGHT"
Copyright 2015\-2019 Jim Turner.
.PP
This program is free software; you can redistribute it and/or modify it
under the terms of the the Artistic License (2.0). You may obtain a
copy of the full license at:
.PP
<http://www.perlfoundation.org/artistic_license_2_0>
.PP
Any use, modification, and distribution of the Standard or Modified
Versions is governed by this Artistic License. By using, modifying or
distributing the Package, you accept this license. Do not use, modify,
or distribute the Package, if you do not accept this license.
.PP
If your Modified Version has been derived from a Modified Version made
by someone other than you, you are nevertheless required to ensure that
your Modified Version complies with the requirements of this license.
.PP
This license does not grant you the right to use any trademark, service
mark, tradename, or logo of the Copyright Holder.
.PP
This license includes the non-exclusive, worldwide, free-of-charge
patent license to make, have made, use, offer to sell, sell, import and
otherwise transfer the Package with respect to any patent claims
licensable by the Copyright Holder that are necessarily infringed by the
Package. If you institute patent litigation (including a cross-claim or
counterclaim) against any party alleging that the Package constitutes
direct or contributory patent infringement, then this Artistic License
to you shall terminate on the date that such litigation is filed.
.PP
Disclaimer of Warranty: \s-1THE PACKAGE IS PROVIDED BY THE COPYRIGHT HOLDER
AND CONTRIBUTORS "AS IS\s0' \s-1AND WITHOUT ANY EXPRESS OR IMPLIED WARRANTIES.
THE IMPLIED WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR
PURPOSE, OR\s0 NON-INFRINGEMENT \s-1ARE DISCLAIMED TO THE EXTENT PERMITTED BY
YOUR LOCAL LAW. UNLESS REQUIRED BY LAW, NO COPYRIGHT HOLDER OR
CONTRIBUTOR WILL BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, OR
CONSEQUENTIAL DAMAGES ARISING IN ANY WAY OUT OF THE USE OF THE PACKAGE,
EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\s0
.SS "\s-1OBSOLETE\s0"
.IX Subsection "OBSOLETE"
if ($html =~ m#(?:Region|State)(?:\e<\e/\ew+\e>)+\es+(\ew+)#i) {  #EXTRACT \s-1THE STATE\s0 (\s-1SITE CURRENTLY RETURNS A FULL STATE NAME\s0):
	\f(CW$state\fR = \f(CW$1\fR;
print \*(L"\-\-\-st=$state=$2=\en\*(R";
	my \f(CW%stateHash\fR = (
			'\s-1TEXAS\s0' => '\s-1TX\s0',
			'\s-1ALABAMA\s0' => '\s-1AL\s0',
			'\s-1ALASKA\s0' => '\s-1AK\s0',
			'\s-1ALBERTA\s0' => '\s-1AB\s0',
			'\s-1ARIZONA\s0' => '\s-1AZ\s0',
			'\s-1ARKANSAS\s0' => '\s-1AR\s0',
			'\s-1BRITISH COLUMBIA\s0' => '\s-1BC\s0',
			'\s-1CALIFORNIA\s0' => '\s-1CA\s0',
			'\s-1COLORADO\s0' => '\s-1CO\s0',
			'\s-1CONNECTICUT\s0' => '\s-1CT\s0',
			'\s-1DELAWARE\s0' => '\s-1DE\s0',
			'\s-1DISTRICT OF COLUMBIA\s0' => '\s-1DC\s0',
			'\s-1FLORIDA\s0' => '\s-1FL\s0',
			'\s-1GEORGIA\s0' => '\s-1GA\s0',
			'\s-1HAWAII\s0' => '\s-1HI\s0',
			'\s-1IDAHO\s0' => '\s-1ID\s0',
			'\s-1ILLINOIS\s0' => '\s-1IL\s0',
			'\s-1INDIANA\s0' => '\s-1IN\s0',
			'\s-1IOWA\s0' => '\s-1IA\s0',
			'\s-1KANSAS\s0' => '\s-1KS\s0',
			'\s-1KENTUCKY\s0' => '\s-1KY\s0',
			'\s-1LOUISIANA\s0' => '\s-1LA\s0',
			'\s-1MAINE\s0' => '\s-1ME\s0',
			'\s-1MANITOBA\s0' => '\s-1MB\s0',
			'\s-1MARYLAND\s0' => '\s-1MD\s0',
			'\s-1MASSACHUSETTS\s0' => '\s-1MA\s0',
			'\s-1MICHIGAN\s0' => '\s-1MI\s0',
			'\s-1MINNESOTA\s0' => '\s-1MN\s0',
			'\s-1MISSISSIPPI\s0' => '\s-1MS\s0',
			'\s-1MISSOURI\s0' => '\s-1MO\s0',
			'\s-1MONTANA\s0' => '\s-1MT\s0',
			'\s-1NEBRASKA\s0' => '\s-1NE\s0',
			'\s-1NEVADA\s0' => '\s-1NV\s0',
			'\s-1NEW BRUNSWICK\s0' => '\s-1NB\s0',
			'\s-1NEW HAMPSHIRE\s0' => '\s-1NH\s0',
			'\s-1NEW JERSEY\s0' => '\s-1NJ\s0',
			'\s-1NEW MEXICO\s0' => '\s-1NM\s0',
			'\s-1NEW YORK\s0' => '\s-1NY\s0',
			'\s-1NEWFOUNDLAND AND LABRADOR\s0' => '\s-1NF\s0',
			'\s-1NORTH CAROLINA\s0' => '\s-1NC\s0',
			'\s-1NORTH DAKOTA\s0' => '\s-1ND\s0',
			'\s-1NORTHWEST TERRITORIES\s0' => '\s-1NT\s0',
			'\s-1NOVA SCOTIA\s0' => '\s-1NS\s0',
			'\s-1OHIO\s0' => '\s-1OH\s0',
			'\s-1OKLAHOMA\s0' => '\s-1OK\s0',
			'\s-1ONTARIO\s0' => '\s-1ON\s0',
			'\s-1OREGON\s0' => '\s-1OR\s0',
			'\s-1PENNSYLVANIA\s0' => '\s-1PA\s0',
			'\s-1PRINCE EDWARD ISLAND\s0' => '\s-1PE\s0',
			'\s-1QUEBEC\s0' => '\s-1QC\s0',
			'\s-1RHODE ISLAND\s0' => '\s-1RI\s0',
			'\s-1SASKATCHEWAN\s0' => '\s-1SK\s0',
			'\s-1SOUTH CAROLINA\s0' => '\s-1SC\s0',
			'\s-1SOUTH DAKOTA\s0' => '\s-1SD\s0',
			'\s-1TENNESSEE\s0' => '\s-1TN\s0',
			'\s-1UTAH\s0' => '\s-1UT\s0',
			'\s-1VERMONT\s0' => '\s-1VT\s0',
			'\s-1VIRGINIA\s0' => '\s-1VA\s0',
			'\s-1WASHINGTON\s0' => '\s-1WA\s0',
			'\s-1WEST VIRGINIA\s0' => '\s-1WV\s0',
			'\s-1WISCONSIN\s0' => '\s-1WI\s0',
			'\s-1WYOMING\s0' => '\s-1WY\s0',
			'\s-1YUKON\s0' => '\s-1YT\s0'
	);
	\f(CW$state\fR =~ tr/a\-z/A\-Z/;
	\f(CW$state\fR = \f(CW$stateHash\fR{$state}  if (defined \f(CW$stateHash\fR{$state});  #CONVERT \s-1STATE NAMES TO PROPER CODE:\s0
}
if ($html =~ m#City(?:\e<\e/\ew+\e>)+\es+(\ew+)#i) {   #EXTRACT \s-1THE CITY:\s0
	\f(CW$city\fR = \f(CW$1\fR;
}
.PP
print \*(L"\-city=$city= st=$state=\en\*(R";
if ($city && \f(CW$state\fR) {    #WE \s-1HAVE A VALID CITY, STATE\s0 \- \s-1NOW TRY TO FETCH A\s0 ZIP-CODE:
	\f(CW$zipSite\fR =~ s/\e<city\e>/$city/g;
	\f(CW$zipSite\fR =~ s/\e<state>/$state/g;
#	\f(CW$html\fR = LWP::Simple::get($zipSite);
my \f(CW$lwpcurl\fR = LWP::Curl\->new(timeout => 10);
die \*(L"f:Could not create curl object?!\*(R"  unless ($lwpcurl);
print \*(L"\-\-ZIPSITE=$zipSite=\en\*(R";
\&\f(CW$html\fR = \f(CW$lwpcurl\fR\->get($zipSite);  #STEP 1:  \s-1FETCH IP AND IT\s0'S \s-1CITY, STATE\s0; \s-1OR ZIP:\s0
print \*(L"\-\-\-html=\*(R".substr($html,0,40).\*(L"=\en\*(R";
	while ($html =~ s!\e<td valign\e=\e\*(L"top\e\*(R" class\e=\e\*(L"main\e\*(R" style\e=\e\*(L"background\e:url\e(images\e/table_gray.gif\e); padding\e:5px 10px\e;\e\*(R" headers\e=\e\*(L"units\e\*(R"\e>\es*(\ed+)!!s) {
		\f(CW$zip\fR = \f(CW$1\fR;
print \*(L"\-\-\-\-\-\-\-zip=$zip=\en\*(R";
	}
	print \f(CW$zip\fR;
	\fBexit\fR\|(0);
}
